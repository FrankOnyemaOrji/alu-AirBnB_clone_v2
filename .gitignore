test_amenity.py
#!/usr/bin/python3
"""Unittest for Amenity class"""

# from tests.test_models.test_base_model import TestBaseModel
# from models.amenity import Amenity


# class TestAmenity(TestBaseModel):
#     """ Test for amenity"""

#     def __init__(self, *args, **kwargs):
#         """ """
#         super().__init__(*args, **kwargs)
#         self.name = "Amenity"
#         self.value = Amenity

#     def test_name2(self):
#         """ """
#         new = self.value()
#         new.name = "amenity"
#         self.assertEqual(type(new.name), str)


test_base_model.py
#!/usr/bin/python3
"""Unittest for BaseModel class"""

# from models.base_model import BaseModel
# import unittest
# import datetime
# from uuid import UUID
# import json
# import os


# class TestBaseModel(unittest.TestCase):
#     """ Test base model"""

#     def __init__(self, *args, **kwargs):
#         """ """
#         super().__init__(*args, **kwargs)
#         self.name = 'BaseModel'
#         self.value = BaseModel

#     def setUp(self):
#         """ """
#         pass

#     def tearDown(self):
#         try:
#             os.remove('file.json')
#         except:
#             pass

#     def test_default(self):
#         """ """
#         i = self.value()
#         self.assertEqual(type(i), self.value)

#     def test_kwargs(self):
#         """ """
#         i = self.value()
#         copy = i.to_dict()
#         new = BaseModel(**copy)
#         self.assertFalse(new is i)

#     def test_kwargs_int(self):
#         """ """
#         i = self.value()
#         copy = i.to_dict()
#         copy.update({1: 2})
#         with self.assertRaises(TypeError):
#             new = BaseModel(**copy)

#     def test_todict(self):
#         """ """
#         i = self.value()
#         n = i.to_dict()
#         self.assertEqual(i.to_dict(), n)

#     def test_kwargs_none(self):
#         """ """
#         n = {None: None}
#         with self.assertRaises(TypeError):
#             new = self.value(**n)

#     def test_id(self):
#         """ """
#         new = self.value()
#         self.assertEqual(type(new.id), str)

#     def test_created_at(self):
#         """ """
#         new = self.value()
#         self.assertEqual(type(new.created_at), datetime.datetime)

#     def test_updated_at(self):
#         """ """
#         new = self.value()
#         self.assertEqual(type(new.updated_at), datetime.datetime)
#         n = new.to_dict()
#         new = BaseModel(**n)
#         self.assertAlmostEqual(new.created_at.timestamp(),
#                                new.updated_at.timestamp(), delta=1)


test_city.py
#!/usr/bin/python3
"""Unittest for City class"""

# from models.state import State
# from tests.test_models.test_base_model import TestBaseModel
# from models.city import City


# class TestCity(TestBaseModel):
#     """ Test for city"""

#     def __init__(self, *args, **kwargs):
#         """ """
#         super().__init__(*args, **kwargs)
#         self.name = "City"
#         self.value = City

#     def test_state_id(self):
#         """ """
#         state = State()
#         new = self.value()
#         new.state_id = state.id
#         self.assertEqual(type(new.state_id), str)

#     def test_name(self):
#         """ """
#         new = self.value()
#         new.name = "Batch"
#         self.assertEqual(type(new.name), str)



test_place.py
#!/usr/bin/python3
"""Unittest for Place class"""

# from models.city import City
# from models.user import User
# from tests.test_models.test_base_model import TestBaseModel
# from models.place import Place


# class TestPlace(TestBaseModel):
#     """ Test for place"""

#     def __init__(self, *args, **kwargs):
#         """ """
#         super().__init__(*args, **kwargs)
#         self.name = "Place"
#         self.value = Place

#     def test_city_id(self):
#         """ """
#         new = self.value()
#         city = City()
#         new.city_id = city.id
#         self.assertEqual(type(new.city_id), str)

#     def test_user_id(self):
#         """ """
#         new = self.value()
#         user = User()
#         new.user_id = user.id
#         self.assertEqual(type(new.user_id), str)

#     def test_name(self):
#         """ """
#         new = self.value()
#         new.name = "Place"
#         self.assertEqual(type(new.name), str)

#     def test_description(self):
#         """ """
#         new = self.value()
#         new.description = ""
#         self.assertEqual(type(new.description), str)

#     def test_number_rooms(self):
#         """ """
#         new = self.value()
#         new.number_rooms = 4
#         self.assertEqual(type(new.number_rooms), int)

#     def test_number_bathrooms(self):
#         """ """
#         new = self.value()
#         new.number_bathrooms = 2
#         self.assertEqual(type(new.number_bathrooms), int)

#     def test_max_guest(self):
#         """ """
#         new = self.value()
#         new.max_guest = 8
#         self.assertEqual(type(new.max_guest), int)

#     def test_price_by_night(self):
#         """ """
#         new = self.value()
#         new.price_by_night = 18
#         self.assertEqual(type(new.price_by_night), int)

#     def test_latitude(self):
#         """ """
#         new = self.value()
#         new.latitude = -123.085222
#         self.assertEqual(type(new.latitude), float)

#     def test_longitude(self):
#         """ """
#         new = self.value()
#         new.longitude = -120.085222
#         self.assertEqual(type(new.longitude), float)

#     def test_amenity_ids(self):
#         """ """
#         new = self.value()
#         self.assertEqual(type(new.amenity_ids), list)


test_review.py
#!/usr/bin/python3
"""Unittest for Review class"""

# from models.place import Place
# from models.user import User
# from tests.test_models.test_base_model import TestBaseModel
# from models.review import Review


# class TestReview(TestBaseModel):
#     """Test for review """

#     def __init__(self, *args, **kwargs):
#         """ """
#         super().__init__(*args, **kwargs)
#         self.name = "Review"
#         self.value = Review

#     def test_place_id(self):
#         """ """
#         new = self.value()
#         place = Place()
#         new.place_id = place.id
#         self.assertEqual(type(new.place_id), str)

#     def test_user_id(self):
#         """ """
#         new = self.value()
#         user = User()
#         new.user_id = user.id
#         self.assertEqual(type(new.user_id), str)

#     def test_text(self):
#         """ """
#         new = self.value()
#         new.text = ""
#         self.assertEqual(type(new.text), str)


test_state.py
#!/usr/bin/python3
"""Unittest for State class"""

# from tests.test_models.test_base_model import TestBaseModel
# from models.state import State


# class TestState(TestBaseModel):
#     """Test for state """

#     def __init__(self, *args, **kwargs):
#         """ """
#         super().__init__(*args, **kwargs)
#         self.name = "California"
#         self.value = State

#     def test_name3(self):
#         """ """
#         new = self.value()
#         new.name = "Arizona"
#         self.assertEqual(type(new.name), str)


test_user.py
#!/usr/bin/python3
"""Unittest for User class"""

# from tests.test_models.test_base_model import TestBaseModel
# from models.user import User


# class TestUser(TestBaseModel):
#     """ Test for user"""

#     def __init__(self, *args, **kwargs):
#         """ """
#         super().__init__(*args, **kwargs)
#         self.name = "User"
#         self.value = User

#     def test_first_name(self):
#         """ """
#         new = self.value()
#         new.first_name = "Chyna"
#         self.assertEqual(type(new.first_name), str)

#     def test_last_name(self):
#         """ """
#         new = self.value()
#         new.last_name = "Chyna"
#         self.assertEqual(type(new.last_name), str)

#     def test_email(self):
#         """ """
#         new = self.value()
#         new.email = "angoyewally@gmail.com"
#         self.assertEqual(type(new.email), str)

#     def test_password(self):
#         """ """
#         new = self.value()
#         new.password = "123aashja"
#         self.assertEqual(type(new.password), str)